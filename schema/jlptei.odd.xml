<TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Jewish Liturgy TEI 2</title>
        <author>Efraim Feinstein</author>
      </titleStmt>
      <publicationStmt>
        <publisher>TEI Consortium</publisher>
        <availability status="free">
          <licence target="http://creativecommons.org/licenses/by-sa/3.0/"> Distributed under a Creative Commons
            Attribution-ShareAlike 3.0 Unported License </licence>
          <licence target="http://www.opensource.org/licenses/BSD-2-Clause">
            <p>Copyright 2013 TEI Consortium.</p>
            <p>All rights reserved.</p>
            <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that
              the following conditions are met:</p>
            <list>
              <item>Redistributions of source code must retain the above copyright notice, this list of conditions and the
                following disclaimer.</item>
              <item>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
                the following disclaimer in the documentation and/or other materials provided with the
                distribution.</item>
            </list>
            <p>This software is provided by the copyright holders and contributors "as is" and any express or implied
              warranties, including, but not limited to, the implied warranties of merchantability and fitness for a
              particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any
              direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to,
              procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however
              caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence
              or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such
              damage.</p>
          </licence>
          <p>TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made
            available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which
            treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content
            in a software environment. For further information or clarification, please contact the <ref target="mailto:info@tei-c.org">TEI Consortium</ref>. </p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>Created with TEI Roma by Efraim Feinstein.</p>
      </sourceDesc>
    </fileDesc><encodingDesc><appInfo><application ident="RomaJS" version="1.1.2" when="2025-06-08T06:26:38.320Z"><desc>File edited with <ref target="https://github.com/TEIC/romajs">RomaJS</ref></desc></application></appInfo><appInfo><application ident="RomaJS" version="1.1.2" when="2025-06-22T06:00:07.280Z"><desc>File edited with <ref target="https://github.com/TEIC/romajs">RomaJS</ref></desc></application></appInfo></encodingDesc>
  </teiHeader>
  <text>
    <body>
      <head>Jewish Liturgy XML Schema</head>
      <!-- Project Structure -->
      <p id="project-structure">
        <head>Project Structure</head>
        <p>Each project in the Jewish Liturgy TEI schema must contain a TEI document called <code>index.xml</code> that serves as the main entry point for the project. This file must include:</p>
        <list>
          <item><gi>teiHeader</gi> containing:</item>
          <list>
            <item>Project metadata in <gi>fileDesc</gi></item>
            <item>Bibliographic information in <gi>sourceDesc</gi></item>
          </list>
          <item><gi>front</gi> for front matter</item>
          <item><gi>body</gi> for the main content</item>
          <item><gi>back</gi> for back matter</item>
        </list>
        <p>The <gi>index.xml</gi> file serves as the central organizing document for the project, linking to other TEI documents through <gi>ptr</gi> or <gi>ref</gi> elements as needed.</p>
      </p>

      <!-- Biblical Texts -->
      <p id="biblical-texts">
        <head>Biblical Texts</head>
        <p>Biblical texts in this schema follow these structural and markup conventions:</p>
        
        <p><hi>Paragraph Structure:</hi>
          <list>
            <item>The primary structural unit is the paragraph (<gi>tei:p</gi>)</item>
            <item>Paragraphs are typed using the <att>type</att> attribute with values:
              <list>
                <item><val>open-N</val>: Paragraph starts with N open parashah markers (פתוחות)</item>
                <item><val>closed-N</val>: Paragraph starts with N closed parashah markers (סתומות)</item>
                <item>Where N is a number indicating the quantity of markers</item>
              </list>
            </item>
          </list>
        </p>

        <p><hi>Division Markers:</hi>
          <list>
            <item>Chapters are marked with <gi>milestone</gi> element with <att>unit</att>="chapter" and <att>n</att> indicating the chapter number</item>
            <item>Verses are marked with <gi>milestone</gi> element with <att>unit</att>="verse" and <att>n</att> indicating the verse number</item>
          </list>
        </p>

        <p><hi>Kri/Ktiv Handling:</hi>
          <list>
            <item>When both Kri (read) and Ktiv (written) forms exist, they are marked up as:
              <code>&lt;choice&gt;
  &lt;j:read&gt;...&lt;/j:read&gt;
  &lt;j:written&gt;...&lt;/j:written&gt;
&lt;/choice&gt;</code>
            </item>
            <item>When only Kri or only Ktiv form exists, the <gi>choice</gi> element is optional</item>
            <item>Kri text is always wrapped in <gi>j:read</gi></item>
            <item>Ktiv text is always wrapped in <gi>j:written</gi></item>
          </list>
        </p>
      </p>
      
      <div id="biblical-texts">
        <head>Biblical Texts</head>
      </div>
      <schemaSpec ident="jlptei" start="TEI" prefix="tei_" targetLang="en" docLang="en">
        
        <!-- required minimal header elements -->
        <moduleRef key="header" include="teiHeader fileDesc titleStmt publicationStmt sourceDesc licence availability distributor edition editionStmt idno"/>
        
        <!-- required core elements (p and title for use in titleStmt) -->
        <moduleRef key="core" include="p title cb choice corr date divGen foreign gb head lb milestone note pb ptr ref reg abbr author bibl editor email emph hi item l label lg list name publisher pubPlace resp respStmt series"/>
        
        <!-- required textstructure elements (TEI, text, and body) -->
        <moduleRef key="textstructure" include="TEI text body div front back"/>
        
        <!-- required module tei instantiates lots of classes used for further expansion of this odd -->
        <moduleRef key="tei"/>
        
        <!-- feature structures for settings -->
        <moduleRef key="iso-fs" include="fs f binary default numeric string symbol vAlt vNot"/>
        

        <!-- Custom jlptei module -->
        <moduleSpec ident="jlptei">
          <desc>Custom elements for the Open Siddur Jewish Liturgy Project TEI schema</desc>
        </moduleSpec>
        
        <moduleRef key="linking" include="ab anchor link seg standOff linkGrp"/><moduleRef key="analysis" include="c pc w"/><moduleRef key="msdescription" include="incipit"/><classRef key="att.anchoring"/><classRef key="model.standOffPart"/><moduleRef key="tagdocs" include="code"/><moduleRef key="gaiji" include="g"/><moduleRef key="textcrit" include="lem"/>
      
      <!-- Custom element specifications -->
      <elementSpec ident="transclude" ns="http://jewishliturgy.org/ns/jlptei/2" module="jlptei" mode="add">
        <desc>An element that includes content from another part of the document.</desc>
        <classes>
          <memberOf key="model.phrase"/>
          <memberOf key="model.global"/>
        </classes>
        <attList>
          <attDef ident="target" usage="req" mode="add">
            <datatype>
              <dataRef key="teidata.pointer"/>
            </datatype>
            <desc>Specifies the path of the target to be included.</desc>
          </attDef>
          <attDef ident="targetEnd" usage="rec" mode="add">
            <datatype>
              <dataRef key="teidata.pointer"/>
            </datatype>
            <desc>Specifies where the transclusion should end (inclusive). If not provided, anything enclosed by target will be transcluded.</desc>
          </attDef>
          <attDef ident="type" usage="opt" mode="add">
            <desc>Specifies the type of transclusion to perform. If no type is specified, the default is external.</desc>
            <defaultVal>external</defaultVal>
            <valList type="closed">
              <valItem ident="external">
                <desc>Include both XML hierarchy and text content.</desc>
              </valItem>
              <valItem ident="inline">
                <desc>Include only text content, without XML hierarchy.</desc>
              </valItem>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      
      <elementSpec ident="standOff" module="linking" mode="change">
        <attList>
          <attDef ident="type" mode="replace">
            <valList type="closed">
              <valItem ident="notes"/>
              <valItem ident="settings"/>
              <valItem ident="conditions"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      
      <elementSpec ident="p" module="core" mode="change">
        <attList>
          <attDef ident="type" mode="add">
            <desc>Characterizes the element in some sense, using any convenient classification scheme or typology.</desc>
            <datatype>
              <dataRef key="teidata.enumerated"/>
            </datatype>
          </attDef>
        </attList>
      </elementSpec>
      
      <elementSpec ident="title" module="core" mode="change">
        <attList>
          <attDef ident="type" mode="replace">
            <valList type="closed">
              <valItem ident="main"/>
              <valItem ident="sub"/>
              <valItem ident="alt"/>
              <valItem ident="alt-sub"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      
      <!-- Elements for representing kri/ktiv (read/written) pairs in Hebrew text -->
      <elementSpec ident="read" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
        <desc>Contains the text as it is read (kri) when it differs from the written form (ktiv).
          Used in Hebrew text to represent the traditional pronunciation of words that are written differently in the text.
          Typically appears within a &lt;choice&gt; element alongside a &lt;written&gt; element.</desc>
        <classes>
          <memberOf key="model.choicePart"/>
          <memberOf key="model.phrase"/>
          <memberOf key="model.global"/>
        </classes>
        <content>
 <macroRef key="macro.paraContent"/>
</content>
      </elementSpec>
      
      <elementSpec ident="written" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
        <desc>Contains the text as it is written (ktiv) when it differs from the read form (kri).
          Used in Hebrew text to represent the written form of words that are pronounced differently.
          Typically appears within a &lt;choice&gt; element alongside a &lt;read&gt; element.</desc>
        <classes>
          <memberOf key="model.choicePart"/>
          <memberOf key="model.phrase"/>
          <memberOf key="model.global"/>
        </classes>
        <content>
          <macroRef key="macro.paraContent"/>
        </content>  
      </elementSpec>
      
    <elementSpec ident="declare" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
      <desc>
        Associates a set of conditional attribute declarations with a range of text. 
        Used to specify that the following content is to be processed with the given declarations in effect, until the corresponding 
        <gi>endDeclare</gi> element or the end of the text. Contains one or more feature structures representing the declarations.
      </desc>
      <classes>
        <memberOf key="att.global"/>
      </classes>
      <content>
        <oneOrMore>
          <elementRef key="model.featureVal.complex"/>
        </oneOrMore>
      </content>
    </elementSpec>

    <elementSpec ident="endDeclare" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
      <desc>
        Marks the end of the scope of a set of conditional attribute declarations previously established by a <gi>set</gi> element.
        The <gi>endDeclare</gi> element must have a required <att>target</att> attribute, which points to the <att>xml:id</att> of the corresponding <gi>set</gi> element in the same file.
      </desc>
      <classes>
        <memberOf key="att.global"/>
        <memberOf key="att.pointing"/>
      </classes>
      <attList>
        <attDef ident="target" usage="req">
          <desc>
            Points to the xml:id of the <gi>declare</gi> element whose settings declarations are being ended. The value must be a URI reference (typically a fragment identifier, e.g., "#setting1") that refers to a <gi>declare</gi> element in the same file.
          </desc>
          <datatype>
            <dataRef key="data.pointer"/>
          </datatype>
        </attDef>
      </attList>
      <content>
        <empty/>
      </content>
      <constraintSpec ident="endDeclare-target-constraints" scheme="schematron">
        <desc>
          Schematron rules to ensure that the target attribute of <gi>undeclare</gi> points to a <gi>declare</gi> element in the same file.
        </desc>
        <rule context="j:declare">
          <assert test="@xml:id">
            Every <gi>declare</gi> element must have an xml:id attribute.
          </assert>
        </rule>
        <rule context="j:endDeclare">
          <assert test="@target">
            The <gi>endDeclare</gi> element must have a target attribute.
          </assert>
          <assert test="starts-with(@target, '#')">
            The target attribute must be a fragment identifier (start with '#').
          </assert>
          <assert test="key('id', substring(@target, 2))[local-name()='declare' and namespace-uri()='http://jewishliturgy.org/ns/jlptei/2']">
            The target attribute must point to a <gi>declare</gi> element in the same file.
          </assert>
          <assert test="preceding::*[@xml:id = substring(@target, 2) and local-name()='declare' and namespace-uri()='http://jewishliturgy.org/ns/jlptei/2']">
            The targeted <gi>declare</gi> element must precede the <gi>endDeclare</gi> element in document order.
          </assert>
        </rule>
        <let name="id" value="substring(@target, 2)"/>
        <key name="id" match="*[@xml:id]" use="@xml:id"/>
      </constraintSpec>
    </elementSpec>

    <elementSpec ident="conditional" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
      <desc>
        Declares a conditional scope for settings or features. The <gi>conditional</gi> element may contain a single <gi>tei:note</gi> (for documentation or explanation), followed by one or more feature value structures (members of <classRef key="model.featureVal.complex"/>).
      </desc>
      <classes>
        <memberOf key="att.global"/>
      </classes>
      <content>
        <sequence>
          <optional>
            <elementRef key="note" ns="http://www.tei-c.org/ns/1.0"/>
          </optional>
          <oneOrMore>
            <classRef key="model.featureVal.complex"/>
          </oneOrMore>
        </sequence>
      </content>
    </elementSpec>

    <elementSpec ident="endConditional" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
      <desc>
        Marks the end of the scope of a <gi>conditional</gi> element. The <gi>endConditional</gi> element must have a required <att>target</att> attribute, which points to the <att>xml:id</att> of the corresponding <gi>conditional</gi> element in the same file.
      </desc>
      <classes>
        <memberOf key="att.global"/>
        <memberOf key="att.pointing"/>
      </classes>
      <attList>
        <attDef ident="target" usage="req">
          <desc>
            Points to the xml:id of the <gi>conditional</gi> element whose scope is being ended. The value must be a URI reference (typically a fragment identifier, e.g., "#cond1") that refers to a <gi>conditional</gi> element in the same file.
          </desc>
          <datatype>
            <dataRef key="data.pointer"/>
          </datatype>
        </attDef>
      </attList>
      <content>
        <empty/>
      </content>
      <constraintSpec ident="endConditional-target-constraints" scheme="schematron">
        <desc>
          Schematron rules to ensure that the target attribute of <gi>endConditional</gi> points to a <gi>conditional</gi> element in the same file and that the referenced element precedes the <gi>endConditional</gi> element.
        </desc>
        <rule context="j:endConditional">
          <assert test="@target">
            The <gi>endConditional</gi> element must have a target attribute.
          </assert>
          <assert test="starts-with(@target, '#')">
            The target attribute must be a fragment identifier (start with '#').
          </assert>
          <assert test="key('id', substring(@target, 2))[local-name()='conditional' and namespace-uri()='http://jewishliturgy.org/ns/jlptei/2']">
            The target attribute must point to a <gi>conditional</gi> element in the same file.
          </assert>
          <assert test="preceding::*[@xml:id = substring(@target, 2) and local-name()='conditional' and namespace-uri()='http://jewishliturgy.org/ns/jlptei/2']">
            The referenced <gi>conditional</gi> element must precede the <gi>endConditional</gi> element.
          </assert>
        </rule>
        <let name="id" value="substring(@target, 2)"/>
        <key name="id" match="*[@xml:id]" use="@xml:id"/>
      </constraintSpec>
    </elementSpec>


    <!-- Logical combinators for conditional feature evaluation -->
    <elementSpec ident="all" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
      <desc>
        Evaluates to true only if all contained feature value structures evaluate to true with respect to the currently in scope declared settings.
      </desc>
      <classes>
        <memberOf key="att.global"/>
      </classes>
      <content>
        <oneOrMore>
          <classRef key="model.featureVal.complex"/>
        </oneOrMore>
      </content>
    </elementSpec>

    <elementSpec ident="any" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
      <desc>
        Evaluates to true if any one of the contained feature value structures evaluates to true with respect to the currently in scope declared settings.
      </desc>
      <classes>
        <memberOf key="att.global"/>
      </classes>
      <content>
        <oneOrMore>
          <classRef key="model.featureVal.complex"/>
        </oneOrMore>
      </content>
    </elementSpec>

    <elementSpec ident="none" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
      <desc>
        Evaluates to true only if none of the contained feature value structures evaluates to true with respect to the currently in scope declared settings.
      </desc>
      <classes>
        <memberOf key="att.global"/>
      </classes>
      <content>
        <oneOrMore>
          <classRef key="model.featureVal.complex"/>
        </oneOrMore>
      </content>
    </elementSpec>

    <elementSpec ident="one" module="jlptei" ns="http://jewishliturgy.org/ns/jlptei/2" mode="add">
      <desc>
        Evaluates to true only if exactly one of the contained feature value structures evaluates to true with respect to the currently in scope declared settings.
      </desc>
      <classes>
        <memberOf key="att.global"/>
      </classes>
      <content>
        <oneOrMore>
          <classRef key="model.featureVal.complex"/>
        </oneOrMore>
      </content>
    </elementSpec>


    </schemaSpec>
    </body>
  </text>
</TEI>